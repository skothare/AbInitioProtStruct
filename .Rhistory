p_TT <- round(fr_tb['TT']/sum(fr_tb),2)
p_HT <- round(fr_tb['HT']/sum(fr_tb),2)
p_TH <- round(fr_tb['TH']/sum(fr_tb),2)
p_HH
p_TT
p_HT
p_TH
# ----------------------------------------------------------------
# Dice Probability
rm(list=ls())
dice <- c(1,2,3,4,5,6)
set.seed(673)
times_rolled <- 500
outcome_ls <- c()
for(i in 1:times_rolled){
#print(i)
outcome_ls[i] <- sample(x=dice, size=1)
#print(outcomes[i])
message(i, '. Outcome = ', outcome_ls[i])
}
p_sides <- table(outcome_ls)/500
p_sides
p_even <- p_sides['2'] + p_sides['4'] + p_sides['6']
p_even # Probability of getting even number
p_odd <- p_sides['1'] + p_sides['3'] + p_sides['5']
p_odd # Probability of getting odd number
outcome_ls
event_ls <- table(outcome_ls)
event_ls
tot <- sum(event_ls)
tot
p_1 <- event_ls[1]/tot
p_2 <- event_ls[2]/tot
p_3 <- event_ls[3]/tot
p_4 <- event_ls[4]/tot
p_5 <- event_ls[5]/tot
p_6 <- event_ls[6]/tot
p_1
p_2
p_3
p_4
p_5
p_6
#------------------------------------------------------------------
# 2 Dice
#------------------------------------------------------------------
# Intersection of Probabilities
rm(list=ls())
# Randomly sample from a coin and from a dice
# Find probability getting a H and and even number
# p_H with p_even
coin <- c('H', 'T')
dice <- c('1', '2', '3', '4', '5', '6')
n_events <- 500
coin_outcome <- c()
dice_outcome <- c()
set.seed(674)
for(i in 1:n_events){
coin_outcome[i] <- sample(coin, size = 1)
dice_outcome[i] <- sample(dice, size = 1)
}
comb_outcome <- paste0(coin_outcome, dice_outcome)
comb_outcome
fr_tb_cd <- table(comb_outcome)
fr_tb_cd
fr_tb_cd[c('H2', 'H4', 'H6')] # Table with just H2, H4 and H6
p_H_even_ind <- (fr_tb_cd/n_events)[c('H2', 'H4', 'H6')]
p_H_even_ind # The individual probs of H2, H4 and H6
p_H_even <- sum(p_H_even)
#' Name: Sanchitha Kuthethoor
#' Date: 22/11/22
#' Ashoka ID: 1020201089
rm(list=ls())
#--------------------------------------------------------------
# Coin Probability
set.seed(173)
coin <- c('H', 'T')
times <- 1000
outcomes <- c() # Empty vector which will store all outcomes
# combn(x=4, m=3) # Creates a 3row, 4 column table
# for a range of 1-10 times, store one random value from 'coin' in
# the ith position of the empty 'outcomes' list
for(i in 1:times){
#print(i)
outcomes[i] <- sample(x=coin, size=1)
#print(outcomes[i])
message(i, '. Outcome = ', outcomes[i])
}
outcomes
events <- table(outcomes)
events
total <- sum(events)
total
p.H <- events['H']/total
p.T <- events['T']/total
p.T <- as.numeric(1 - p.H)
p.H
p.T
# --------------------------------------------------------------
# Probabilities With 2 Events - 2 Coins Flipped
coin_A <- c('H', 'T')
coin_B <- c('H', 'T')
n_events <- 30
outcome_A <- c()
outcome_B <- c()
set.seed(1094)
for(i in 1:n_events){
outcome_A[i] <- sample(coin_A, size = 1)
outcome_B[i] <- sample(coin_B, size = 1)
}
outcome_A
outcome_B
comb_events <- paste0(outcome_A, outcome_B) # To get one list with combined values
fr_tb <- table(comb_events)
fr_tb
p_HH <- round(fr_tb['HH']/sum(fr_tb),2)
p_TT <- round(fr_tb['TT']/sum(fr_tb),2)
p_HT <- round(fr_tb['HT']/sum(fr_tb),2)
p_TH <- round(fr_tb['TH']/sum(fr_tb),2)
p_HH
p_TT
p_HT
p_TH
# ----------------------------------------------------------------
# Dice Probability
rm(list=ls())
dice <- c(1,2,3,4,5,6)
set.seed(673)
times_rolled <- 500
outcome_ls <- c()
for(i in 1:times_rolled){
#print(i)
outcome_ls[i] <- sample(x=dice, size=1)
#print(outcomes[i])
message(i, '. Outcome = ', outcome_ls[i])
}
p_sides <- table(outcome_ls)/500
p_sides
p_even <- p_sides['2'] + p_sides['4'] + p_sides['6']
p_even # Probability of getting even number
p_odd <- p_sides['1'] + p_sides['3'] + p_sides['5']
p_odd # Probability of getting odd number
outcome_ls
event_ls <- table(outcome_ls)
event_ls
tot <- sum(event_ls)
tot
p_1 <- event_ls[1]/tot
p_2 <- event_ls[2]/tot
p_3 <- event_ls[3]/tot
p_4 <- event_ls[4]/tot
p_5 <- event_ls[5]/tot
p_6 <- event_ls[6]/tot
p_1
p_2
p_3
p_4
p_5
p_6
#------------------------------------------------------------------
# 2 Dice
#------------------------------------------------------------------
# Intersection of Probabilities
rm(list=ls())
# Randomly sample from a coin and from a dice
# Find probability getting a H and and even number
# p_H with p_even
coin <- c('H', 'T')
dice <- c('1', '2', '3', '4', '5', '6')
n_events <- 500
coin_outcome <- c()
dice_outcome <- c()
set.seed(674)
for(i in 1:n_events){
coin_outcome[i] <- sample(coin, size = 1)
dice_outcome[i] <- sample(dice, size = 1)
}
comb_outcome <- paste0(coin_outcome, dice_outcome)
comb_outcome
fr_tb_cd <- table(comb_outcome)
fr_tb_cd
fr_tb_cd[c('H2', 'H4', 'H6')] # Table with just H2, H4 and H6
p_H_even_ind <- (fr_tb_cd/n_events)[c('H2', 'H4', 'H6')]
p_H_even_ind # The individual probs of H2, H4 and H6
p_H_even_ind <- sum(p_H_even)
#' Name: Sanchitha Kuthethoor
#' Date: 22/11/22
#' Ashoka ID: 1020201089
rm(list=ls())
#--------------------------------------------------------------
# Coin Probability
set.seed(173)
coin <- c('H', 'T')
times <- 1000
outcomes <- c() # Empty vector which will store all outcomes
# combn(x=4, m=3) # Creates a 3row, 4 column table
# for a range of 1-10 times, store one random value from 'coin' in
# the ith position of the empty 'outcomes' list
for(i in 1:times){
#print(i)
outcomes[i] <- sample(x=coin, size=1)
#print(outcomes[i])
message(i, '. Outcome = ', outcomes[i])
}
outcomes
events <- table(outcomes)
events
total <- sum(events)
total
p.H <- events['H']/total
p.T <- events['T']/total
p.T <- as.numeric(1 - p.H)
p.H
p.T
# --------------------------------------------------------------
# Probabilities With 2 Events - 2 Coins Flipped
coin_A <- c('H', 'T')
coin_B <- c('H', 'T')
n_events <- 30
outcome_A <- c()
outcome_B <- c()
set.seed(1094)
for(i in 1:n_events){
outcome_A[i] <- sample(coin_A, size = 1)
outcome_B[i] <- sample(coin_B, size = 1)
}
outcome_A
outcome_B
comb_events <- paste0(outcome_A, outcome_B) # To get one list with combined values
fr_tb <- table(comb_events)
fr_tb
p_HH <- round(fr_tb['HH']/sum(fr_tb),2)
p_TT <- round(fr_tb['TT']/sum(fr_tb),2)
p_HT <- round(fr_tb['HT']/sum(fr_tb),2)
p_TH <- round(fr_tb['TH']/sum(fr_tb),2)
p_HH
p_TT
p_HT
p_TH
# ----------------------------------------------------------------
# Dice Probability
rm(list=ls())
dice <- c(1,2,3,4,5,6)
set.seed(673)
times_rolled <- 500
outcome_ls <- c()
for(i in 1:times_rolled){
#print(i)
outcome_ls[i] <- sample(x=dice, size=1)
#print(outcomes[i])
message(i, '. Outcome = ', outcome_ls[i])
}
p_sides <- table(outcome_ls)/500
p_sides
p_even <- p_sides['2'] + p_sides['4'] + p_sides['6']
p_even # Probability of getting even number
p_odd <- p_sides['1'] + p_sides['3'] + p_sides['5']
p_odd # Probability of getting odd number
outcome_ls
event_ls <- table(outcome_ls)
event_ls
tot <- sum(event_ls)
tot
p_1 <- event_ls[1]/tot
p_2 <- event_ls[2]/tot
p_3 <- event_ls[3]/tot
p_4 <- event_ls[4]/tot
p_5 <- event_ls[5]/tot
p_6 <- event_ls[6]/tot
p_1
p_2
p_3
p_4
p_5
p_6
#------------------------------------------------------------------
# 2 Dice
#------------------------------------------------------------------
# Intersection of Probabilities
rm(list=ls())
# Randomly sample from a coin and from a dice
# Find probability getting a H and and even number
# p_H with p_even
coin <- c('H', 'T')
dice <- c('1', '2', '3', '4', '5', '6')
n_events <- 500
coin_outcome <- c()
dice_outcome <- c()
set.seed(674)
for(i in 1:n_events){
coin_outcome[i] <- sample(coin, size = 1)
dice_outcome[i] <- sample(dice, size = 1)
}
comb_outcome <- paste0(coin_outcome, dice_outcome)
comb_outcome
fr_tb_cd <- table(comb_outcome)
fr_tb_cd
fr_tb_cd[c('H2', 'H4', 'H6')] # Table with just H2, H4 and H6
p_H_even_ind <- (fr_tb_cd/n_events)[c('H2', 'H4', 'H6')]
p_H_even_ind # The individual probs of H2, H4 and H6
p_H_even <- sum(p_H_even_ind)
p_H_even # The probability of H2+H4+H6
#-----------------------------------------------------------------
# Biased Coin
unfair_coin <- c()
fair_coin <- c()
set.seed(785)
for(i in 1:1000){
unfair_coin[i] <- sample(coin, size = 1, prob = c(0.8, 0.2))
fair_coin[i] <- sample(coin, size = 1, prob = c(0.5, 0.5))
}
unfair_coin
fair_coin
png('figures/lecture-05-coin.png')
unfair_coin
fair_coin
png('figures/lecture-05-coin.png')
#'H'='#ff81ae', 'T' = "#94aabb"
ls.files
list.dirs()
dir.create('figures')
png('figures/lecture-05-coin.png')
png('figures/lecture-05-coin.png')
png('figures/lecture-05-coin.png')
png('figures/lecture-05-coin.png')
par(mfrow=c(1,2))
barplot(table(unfair_coin),
main = 'Biased: H = 0.8, T = 0.2(n=1k)',
horiz = TRUE,
ylab = 'Freq',
col = c('H'='red', 'T' = "skyblue"))
barplot(table(fair_coin),
main = 'Unbiased: H = 0.5, T = 0.5(n=1k)',
horiz = TRUE,
ylab = 'Freq',
col = c('H'='red', 'T' = "skyblue"))
#'H'='#ff81ae', 'T' = "#94aabb"
dev.off()
#'H'='#ff81ae', 'T' = "#94aabb"
dev.off()
#'H'='#ff81ae', 'T' = "#94aabb"
dev.off()
#'H'='#ff81ae', 'T' = "#94aabb"
dev.off()
png('figures/lecture-05-coin.png')
par(mfrow=c(1,2))
barplot(table(unfair_coin),
main = 'Biased: H = 0.8, T = 0.2(n=1k)',
horiz = TRUE,
ylab = 'Freq',
col = c('H'='red', 'T' = "skyblue"))
barplot(table(fair_coin),
main = 'Unbiased: H = 0.5, T = 0.5(n=1k)',
horiz = TRUE,
ylab = 'Freq',
col = c('H'='red', 'T' = "skyblue"))
#'H'='#ff81ae', 'T' = "#94aabb"
dev.off()
getwd
getwd()
#' Name: Sanchitha Kuthethoor
#' Date: 15/11/22
#' Ashoka ID: 1020201089
hist(rnorm(100000,20,2),
main = "Frequency Distribution")
hist(
rnorm(n=1000, mean=20, sd=2),
main = "Normal Frequency Distribution"
)
# Gets values from normal dist with n=10000,etc
# For Normal dist, mean, mode, median all the same
x <- rnorm(n=100, mean=20, sd=2)
x
# X is numeric variable = object where values are stored
# List, data frame, matrix
# Useful functions
head(x) # Top portion of dataset - first 6 values default
tail(x) # Bottom portion of dataset - last 6 values
x[1:10] # Print first 10 values, indexing starts from 1
xx <- c(1,16,17,10)
xx[3] # To access 3rd value
xx[-3] # To remove 3rd value and print list
xx <- xx[-3] # Updating old list with new values
xx[c(1,3)] # To access 1 and 3rd element
xx[c(1:3)] # To access 1 to 3rd element
# CREATING A CATEGORICAL VARIABLE (NOMINAL VARIABLE)
set.seed(101)
sex_ <- sample(x=c('M', 'F'), replace = TRUE, size = 100)
sex_
head(sex_)
ft_sex <- table(sex_) # Frequency table
ft_sex
# Frequency plot/Bar plot
barplot(ft_sex, xlab = 'Gender', ylab = 'Frequency',
main ="Frequency plot (Barplot) of Gender")
# TABLE 1: CREATING A TABLE WITH GIVEN VALUES
ft_nest_site <- c(46, 60, 46, 49) # Frequency table
ft_nest_site
names(ft_nest_site) <- c('A', 'B', 'C', 'D')
# Sets names for the values in the list
# ft_nest_site
# A  B  C  D
# 46 60 46 49
barplot(ft_nest_site, xlab ='Nest site', ylab = 'Frequency',
main = "Freq. Dist. of Nest Sites")
ft_nest_site['C'] # To access C data
# Returns
# C
# 46
ft_nest_site[c('A', 'C', 'D')] # Multiple indexing with names
# ft_nest_site[c('A', 'C', 'D')]
# A  C  D
# 46 46 49
# TABLE 2: DISCRETE DATA
x_pigm <- rep(x = c(0,1,2,3,4), c(13,68,44,21,8))
x_pigm
ft_pigm <- table(x_pigm)
ft_pigm
# x_pigm
# 0  1  2  3  4
# 13 68 44 21  8
x_pigm_fac <- factor(x_pigm) # Converts to a specific order
x_pigm_fac
# Levels: 0 1 2 3 4
x_pigm_order <- factor(x_pigm,
levels = c(4,2,1,0,3))
x_pigm_order # Gives custom order
# New freq table switches the order
ft_pigm_order <- table(x_pigm_order)
ft_pigm_order
# x_pigm_order
# 4  2  1  0  3
# 8 44 68 13 21
barplot(ft_pigm,
xlab = 'Class pigmentation',
ylab = 'Frequency',
main = 'Original')
barplot(ft_pigm_order,
xlab = 'Class pigmentation',
ylab = 'Frequency',
main = 'Ordered')
# Join two figures
par(mfrow = c(1,2))
barplot(ft_pigm,
xlab = 'Class pigmentation',
ylab = 'Frequency',
main = 'Original')
barplot(ft_pigm_order,
xlab = 'Class pigmentation',
ylab = 'Frequency',
main = 'Ordered')
dir.create('figures', showWarnings = FALSE) #Create directory - figures
png(filename = 'figures/lecture-02-Freq-plot-pigmentation.png') # Create file in it
barplot(ft_pigm_order,
xlab = 'Class pigmentation',
ylab = 'Frequency',
main = 'Ordered')
dev.off()
dir.create('figures', showWarnings = FALSE) #Create directory - figures
png(filename = 'figures/lecture-02-Freq-plot-pigmentation-150dpi.png', # Create file in it
width = 800, height = 600, res = 150) # Additional Parameters
barplot(ft_pigm_order,
xlab = 'Class pigmentation',
ylab = 'Frequency',
main = 'Ordered')
dev.off()
# TABLE 3: GROUPED DATA
tab_3 <-  c(6,17,40,54,59,75,77,55,32,8,1)
# Giving names to each category
names(tab_3) <- c(
"0-3", "4-7", "8-11", "12-15", "16-19", "20-23",
"24-27", "28-31", "32-35", "36-39", "40-43" )
barplot(tab_3, las=2, xlab = 'Number of Aphids on a Plant',
ylab = 'Frequency of Observations',
main = 'Grouped Data')
dir.create('figures', showWarnings = FALSE) #Create directory - figures
png(filename = 'figures/lecture-02-Grouped-plot-pigmentation-150dpi.png', # Create file in it
width = 800, height = 600, res = 150) # Additional Parameters
barplot(tab_3, las=2, xlab = 'Number of Aphids on a Plant',
ylab = 'Frequency of Observations',
main = 'Grouped Data')
dev.off()
?par
?las
getwd()
setwd(C:\Users\Sanchitha\OneDrive\Documents\My Docs\Ashoka\Monsoon 2022\Biostats\biostats.Sanchitha_Kuthethoor)
setwd(C:/Users/Sanchitha/OneDrive/Documents/My Docs/Ashoka/Monsoon 2022/Biostats/biostats.Sanchitha_Kuthethoor)
install.packages("ggcorrplot")
install.packages("reshape")
install.packages("ape")
install.packages("ape")
i
i
ikjv;iv
install.packages("reshape")
install.packages("stringr")
install.packages("ggplot2")
install.packages("shiny")
install.packages("ggplot2")
library(shiny)
detach("package:shiny", unload = TRUE)
shiny::runApp('C:/Users/Sanchitha/go/src/TestShinyApp')
runApp('C:/Users/Sanchitha/go/src/TestShinyApp')
runApp('C:/Users/Sanchitha/go/src/TestShinyApp')
runApp('C:/Users/Sanchitha/go/src/TestShinyApp')
runApp('C:/Users/Sanchitha/go/src/TestShinyApp')
shiny::runApp('C:/Users/Sanchitha/go/src/GroupProject_Draft1')
runApp()
runApp('C:/Users/Sanchitha/go/src/GroupProject_Draft1')
shiny::runApp('C:/Users/Sanchitha/go/src/GroupProject_Draft1')
runApp('C:/Users/Sanchitha/go/src/GroupProject_Draft1')
library(shiny); runApp('C:/Users/Sanchitha/go/src/CombinedCode/auto_Validation.R')
